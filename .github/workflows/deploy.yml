name: Deploy AI Adventure Game

env:
  AWS_REGION: eu-west-2
  AWS_ROLE_ARN: arn:aws:iam::436549840164:role/github_action_role
  AWS_BACKEND_BUCKET: aws-demo-game-terraform-state
  AMPLIFY_ENV_NAME: dev
  TF_VERSION: "1.5.0"

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    outputs:
      user_pool_id: ${{ steps.terraform_output.outputs.user_pool_id }}
      client_id: ${{ steps.terraform_output.outputs.client_id }}
      lambda_endpoint: ${{ steps.terraform_output.outputs.lambda_endpoint }}
      amplify_app_id: ${{ steps.terraform_output.outputs.amplify_app_id }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        env:
          AWS_BUCKET_NAME: ${{ env.AWS_BACKEND_BUCKET }}

      - name: Terraform Format
        run: terraform fmt -check

      # Package Lambda before Terraform operations
      - name: Package Lambda Code
        run: |
            cd bedrock-code
            if [ ! -f requirements.txt ]; then
              echo "requirements.txt not found"
              exit 1
            fi
            
            # Create directory structure for Lambda layer
            mkdir -p python/lib/python3.9/site-packages
            
            # Install dependencies into the layer directory
            pip install -r requirements.txt -t python/lib/python3.9/site-packages
            
            # Create Lambda layer ZIP
            zip -r ../lambda_layer.zip python
            
            # Original Lambda function ZIP
            zip -r ../lambda.zip ./*
      # - name: Package Lambda Code
      #   run: |
      #     cd bedrock-code
      #     if [ ! -f requirements.txt ]; then
      #       echo "requirements.txt not found"
      #       exit 1
      #     fi
      #     pip install -r requirements.txt -t .
      #     zip -r ../lambda.zip ./*

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -out=tfplan -var="environment=${GITHUB_REF##*/}" || (
            echo "Terraform plan failed"
            exit 1
          )

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: |
          terraform apply -auto-approve || (
            echo "Terraform apply failed"
            exit 1
          )

      # - name: Get Terraform Outputs
      #   id: terraform_output
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
      #   run: |
      #     if ! user_pool_id=$(terraform output -raw cognito_user_pool_id); then
      #       echo "Failed to get user_pool_id"
      #       exit 1
      #     fi
      #     echo "user_pool_id=$user_pool_id" >> $GITHUB_OUTPUT

      #     if ! client_id=$(terraform output -raw cognito_client_id); then
      #       echo "Failed to get client_id"
      #       exit 1
      #     fi
      #     echo "client_id=$client_id" >> $GITHUB_OUTPUT

      #     if ! lambda_endpoint=$(terraform output -raw lambda_endpoint); then
      #       echo "Failed to get lambda_endpoint"
      #       exit 1
      #     fi
      #     echo "lambda_endpoint=$lambda_endpoint" >> $GITHUB_OUTPUT
          
      #     if ! amplify_app_id=$(terraform output -raw amplify_app_id); then
      #       echo "Failed to get amplify_app_id"
      #       exit 1
      #     fi
      #     echo "amplify_app_id=$amplify_app_id" >> $GITHUB_OUTPUT

      - name: Get Terraform Outputs
        id: terraform_output
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: |
          # Attempt to get outputs with error handling
          user_pool_id=$(terraform output -raw cognito_user_pool_id 2>/dev/null | tr -d '\n')
          client_id=$(terraform output -raw cognito_client_id 2>/dev/null | tr -d '\n')
          lambda_endpoint=$(terraform output -raw lambda_endpoint 2>/dev/null | tr -d '\n')
          amplify_app_id=$(terraform output -raw amplify_app_id 2>/dev/null | tr -d '\n')

          # Validate outputs
          if [ -z "$user_pool_id" ]; then
            echo "Failed to get user_pool_id"
            terraform output
            exit 1
          fi

          # Output to GitHub Actions
          echo "user_pool_id=$user_pool_id" >> $GITHUB_OUTPUT
          echo "client_id=$client_id" >> $GITHUB_OUTPUT
          echo "lambda_endpoint=$lambda_endpoint" >> $GITHUB_OUTPUT
          echo "amplify_app_id=$amplify_app_id" >> $GITHUB_OUTPUT

          # Debug output
          echo "Extracted Outputs:"
          echo "User Pool ID: $user_pool_id"
          echo "Lambda Endpoint: $lambda_endpoint"
     

  frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        run: |
          npm install
          npm install -g @aws-amplify/cli

      - name: Create .env file
        run: |
          echo "REACT_APP_AWS_REGION=${{ env.AWS_REGION }}" > .env
          echo "REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}" >> .env
          echo "REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.client_id }}" >> .env
          echo "REACT_APP_LAMBDA_ENDPOINT=${{ needs.terraform.outputs.lambda_endpoint }}" >> .env
          echo "REACT_APP_ENVIRONMENT=${{ env.AMPLIFY_ENV_NAME }}" >> .env

      - name: Prepare Amplify Deployment
        run: |
            # Verify AWS CLI configuration
            aws configure list
            
            # Check Amplify CLI version
            npm install -g @aws-amplify/cli
            amplify --version
            
            # Debug AWS Account Information
            aws sts get-caller-identity
            
            # Remove existing Amplify configuration
            echo "Removing existing Amplify configuration..."
            rm -rf amplify || true
            mkdir -p amplify
    
      - name: Initialize Amplify Project
        run: |
            echo "Initializing Amplify project..."
            amplify init \
              --name aiadventuregame \
              --appId d3s8tb811rq75i \
              --envName dev \
              --providers awscloudformation \
              --yes \
              || (
                echo "Initial init failed. Attempting alternative initialization..."
                amplify init \
                  --name aiadventuregame \
                  --envName dev \
                  --providers awscloudformation \
                  --yes
              )
    
      - name: Configure Amplify Project
        run: |
            # Verify project initialization
            echo "Checking Amplify environment..."
            amplify env list
            
            # Add environment if needed
            amplify env add dev --yes || true
            
            # Pull existing cloud configuration
            echo "Pulling cloud configuration..."
            amplify pull \
              --appId d3s8tb811rq75i \
              --envName dev \
              --yes \
              || echo "Pull may have partial issues"
    
      - name: Push Amplify Changes
        run: |
            # Push changes to cloud
            echo "Pushing Amplify changes..."
            amplify push --yes \
              || (
                echo "Push encountered issues. Attempting force push..."
                amplify push --yes --force
              )
    
      - name: Publish to Amplify Hosting
        run: |
            # Publish project
            echo "Publishing to Amplify Hosting..."
            amplify publish --yes \
              || (
                echo "Publish encountered issues. Generating diagnostic report..."
                amplify diagnose --send-report
              )
        
        env:
            AWS_REGION: eu-west-2
            AWS_ROLE_ARN: arn:aws:iam::436549840164:role/github_action_role
            AWS_BACKEND_BUCKET: aws-demo-game-terraform-state
            AMPLIFY_ENV_NAME: dev

      - name: Fix Component File Names
        run: |
          mv src/components/profile.js src/components/Profile.js 2>/dev/null || true
          mv src/components/inventory.js src/components/Inventory.js 2>/dev/null || true      

      - name: Build Frontend
        run: |
          npm run build
        env:
          CI: true
          REACT_APP_AWS_REGION: ${{ env.AWS_REGION }}
          REACT_APP_USER_POOL_ID: ${{ needs.terraform.outputs.user_pool_id }}
          REACT_APP_USER_POOL_CLIENT_ID: ${{ needs.terraform.outputs.client_id }}
          REACT_APP_LAMBDA_ENDPOINT: ${{ needs.terraform.outputs.lambda_endpoint }}
          REACT_APP_ENVIRONMENT: ${{ env.AMPLIFY_ENV_NAME }}

      - name: Deploy to Amplify
        run: |
            amplify publish --yes || (
              echo "Amplify deployment failed"
              echo "Directory structure:"
              ls -R amplify/
              echo "Project config:"
              cat amplify/.config/project-config.json
              echo "Local env info:"
              cat amplify/.config/local-env-info.json
              echo "Amplify meta:"
              cat amplify/backend/amplify-meta.json
              exit 1
            )
      - name: Upload Diagnostic Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
              name: amplify-diagnose-report
              path: /tmp/aiadventuregame/report-*.zip
              retention-days: 5         
               
  # frontend:
  #   name: Deploy Frontend
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ env.AWS_ROLE_ARN }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Install Dependencies
  #       run: |
  #         npm install
  #         npm install -D typescript @types/react @types/react-dom
  #         npm install -g @aws-amplify/cli

  #     - name: Create .env file
  #       run: |
  #         echo "REACT_APP_AWS_REGION=${{ env.AWS_REGION }}" > .env
  #         echo "REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}" >> .env
  #         echo "REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.client_id }}" >> .env
  #         echo "REACT_APP_LAMBDA_ENDPOINT=${{ needs.terraform.outputs.lambda_endpoint }}" >> .env
  #         echo "REACT_APP_ENVIRONMENT=${{ env.AMPLIFY_ENV_NAME }}" >> .env
          
  #         # Debug output
  #         echo "Environment file contents:"
  #         cat .env

  #     - name: Create Amplify Backend Configuration
  #       run: |
  #           # Ensure Amplify backend directories exist
  #           mkdir -p amplify/backend
  #           mkdir -p amplify/.config
        
  #           # Create project configuration with correct providers format
  #           echo '{
  #             "projectName": "aiadventuregame",
  #             "version": "3.1",
  #             "frontend": "javascript",
  #             "javascript": {
  #               "framework": "react",
  #               "config": {
  #                 "SourceDir": "src",
  #                 "DistributionDir": "build",
  #                 "BuildCommand": "npm run-script build",
  #                 "StartCommand": "npm run-script start"
  #               }
  #             },
  #             "providers": {
  #               "awscloudformation": {
  #                 "Region": "'${{ env.AWS_REGION }}'",
  #                 "StackName": "amplify-aiadventuregame-dev-00000",
  #                 "EnvironmentName": "dev",
  #                 "Bucket": "'${{ env.AWS_BACKEND_BUCKET }}'",
  #                 "AppId": "d3s8tb811rq75i"
  #               }
  #             }
  #           }' > amplify/.config/project-config.json
        
  #           # Create local env info
  #           echo '{
  #             "projectPath": "'$(pwd)'",
  #             "defaultEditor": "vscode",
  #             "envName": "dev"
  #           }' > amplify/.config/local-env-info.json
        
  #           # Create backend meta file
  #           echo '{
  #             "providers": {
  #               "awscloudformation": {
  #                 "Region": "'${{ env.AWS_REGION }}'",
  #                 "StackName": "amplify-aiadventuregame-dev-00000",
  #                 "EnvironmentName": "dev",
  #                 "Bucket": "'${{ env.AWS_BACKEND_BUCKET }}'",
  #                 "AppId": "d3s8tb811rq75i"
  #               }
  #             },
  #             "projectName": "aiadventuregame"
  #           }' > amplify/backend/amplify-meta.json
        
  #           # Create team provider info
  #           echo '{
  #             "dev": {
  #               "awscloudformation": {
  #                 "Region": "'${{ env.AWS_REGION }}'",
  #                 "AppId": "d3s8tb811rq75i",
  #                 "EnvironmentName": "dev",
  #                 "Bucket": "'${{ env.AWS_BACKEND_BUCKET }}'",
  #                 "StackName": "amplify-aiadventuregame-dev-00000"
  #               }
  #             }
  #           }' > amplify/team-provider-info.json
        
  #           # Create .amplifyrc with explicit provider configuration
  #           echo '{
  #             "projectName": "aiadventuregame",
  #             "envName": "dev",
  #             "defaultEditor": "vscode",
  #             "amplify": {
  #               "projectId": "d3s8tb811rq75i"
  #             },
  #             "providers": {
  #               "awscloudformation": {
  #                 "Region": "'${{ env.AWS_REGION }}'",
  #                 "ProviderName": "awscloudformation",
  #                 "StackName": "amplify-aiadventuregame-dev-00000"
  #               }
  #             }
  #           }' > .amplifyrc

  #     - name: Initialize Amplify
  #       run: |
  #             # Verify Amplify CLI version
  #             amplify --version
          
  #             # Disable logging and force non-interactive mode
  #             export AMPLIFY_CLI_DISABLE_LOGGING=true
  #             export CI=1
          
  #             # Create a configuration JSON file
  #             echo '{
  #               "projectName": "aiadventuregame",
  #               "envName": "dev",
  #               "defaultEditor": "vscode",
  #               "frontend": "javascript",
  #               "framework": "react"
  #             }' > amplify-config.json
          
  #             # Try to initialize Amplify with comprehensive configuration
  #             AMPLIFY_CONFIG_FILE=amplify-config.json amplify init \
  #               --appId d3s8tb811rq75i \
  #               --envName dev \
  #               --yes \
  #               --frontend javascript \
  #               --framework react \
  #               --config '{"SourceDir":"src","DistributionDir":"build","BuildCommand":"npm run-script build","StartCommand":"npm run-script start"}' 2>&1
          

  #     - name: Fix Component File Names
  #       run: |
  #         mv src/components/profile.js src/components/Profile.js 2>/dev/null || true
  #         mv src/components/inventory.js src/components/Inventory.js 2>/dev/null || true

  #     - name: Build Frontend
  #       run: |
  #         npm run build
  #       env:
  #         CI: true
  #         REACT_APP_AWS_REGION: ${{ env.AWS_REGION }}
  #         REACT_APP_USER_POOL_ID: ${{ needs.terraform.outputs.user_pool_id }}
  #         REACT_APP_USER_POOL_CLIENT_ID: ${{ needs.terraform.outputs.client_id }}
  #         REACT_APP_LAMBDA_ENDPOINT: ${{ needs.terraform.outputs.lambda_endpoint }}
  #         REACT_APP_ENVIRONMENT: ${{ env.AMPLIFY_ENV_NAME }}

  #     - name: Deploy to Amplify
  #       run: |
  #           # Additional debugging
  #           echo "Amplify App ID: d3s8tb811rq75i"
  #           echo "Environment Name: dev"
  #           echo "AWS Region: ${{ env.AWS_REGION }}"
  #           echo "Backend Bucket: ${{ env.AWS_BACKEND_BUCKET }}"
        
  #           # Verify backend configuration
  #           echo "Amplify backend directory contents:"
  #           ls -la amplify/backend
        
  #           # Try to push and publish
  #           export AMPLIFY_CLI_DISABLE_LOGGING=true
  #           export CI=1
        
  #           amplify push --yes
  #           amplify publish --yes || (
  #             echo "Amplify deployment failed"
  #             echo "Project config:"
  #             cat amplify/.config/project-config.json
  #             echo "Local env info:"
  #             cat amplify/.config/local-env-info.json
  #             echo "Team provider info:"
  #             cat amplify/team-provider-info.json
  #             echo "Backend meta:"
  #             cat amplify/backend/amplify-meta.json
  #             exit 1
  #           )
        
  # # frontend:
  # #     name: Deploy Frontend
  # #     runs-on: ubuntu-latest
  # #     needs: terraform
  # #     if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
  # #     steps:
  # #       - name: Checkout Repository
  # #         uses: actions/checkout@v3

  # #       - name: Setup Node.js
  # #         uses: actions/setup-node@v3
  # #         with:
  # #           node-version: '18'

  # #       - name: Configure AWS Credentials
  # #         uses: aws-actions/configure-aws-credentials@v4
  # #         with:
  # #           role-to-assume: ${{ env.AWS_ROLE_ARN }}
  # #           aws-region: ${{ env.AWS_REGION }}

  # #       - name: Install Dependencies
  # #         run: |
  # #           npm install
  # #           npm install -D typescript @types/react @types/react-dom
  # #           npm install -g @aws-amplify/cli

  # #       - name: Create .env file
  # #         run: |
  # #           echo "REACT_APP_AWS_REGION=${{ env.AWS_REGION }}" > .env
  # #           echo "REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}" >> .env
  # #           echo "REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.client_id }}" >> .env
  # #           echo "REACT_APP_LAMBDA_ENDPOINT=${{ needs.terraform.outputs.lambda_endpoint }}" >> .env
  # #           echo "REACT_APP_ENVIRONMENT=${{ env.AMPLIFY_ENV_NAME }}" >> .env
            
  # #           # Debug output
  # #           echo "Environment file contents:"
  # #           cat .env

  # #       - name: Configure Amplify
  # #         run: |
  # #           # Create necessary Amplify configuration directories
  # #           mkdir -p amplify/.config

  # #           # Create project-config.json
  # #           echo '{
  # #             "projectName": "aiadventuregame",
  # #             "version": "3.1",
  # #             "frontend": "javascript",
  # #             "javascript": {
  # #               "framework": "react",
  # #               "config": {
  # #                 "SourceDir": "src",
  # #                 "DistributionDir": "build",
  # #                 "BuildCommand": "npm run-script build",
  # #                 "StartCommand": "npm run-script start"
  # #               }
  # #             },
  # #             "providers": ["awscloudformation"]
  # #           }' > amplify/.config/project-config.json

  # #           # Create local-env-info.json
  # #           echo '{
  # #             "projectPath": "'$(pwd)'",
  # #             "defaultEditor": "vscode",
  # #             "envName": "'${AMPLIFY_ENV_NAME}'"
  # #           }' > amplify/.config/local-env-info.json

  # #           # Initialize Amplify
  # #           amplify init \
  # #             --appId ${{ needs.terraform.outputs.amplify_app_id }} \
  # #             --envName ${{ env.AMPLIFY_ENV_NAME }} \
  # #             --yes \
  # #             --frontend javascript \
  # #             --framework react \
  # #             --config '{"SourceDir":"src","DistributionDir":"build","BuildCommand":"npm run-script build","StartCommand":"npm run-script start"}'
  # #       - name: Fix Component File Names
  # #         run: |
  # #               mv src/components/profile.js src/components/Profile.js 2>/dev/null || true
  # #               mv src/components/inventory.js src/components/Inventory.js 2>/dev/null || true
  # #       - name: Build Frontend
  # #         run: |
  # #           npm run build
  # #         env:
  # #           CI: true
  # #           REACT_APP_AWS_REGION: ${{ env.AWS_REGION }}
  # #           REACT_APP_USER_POOL_ID: ${{ needs.terraform.outputs.user_pool_id }}
  # #           REACT_APP_USER_POOL_CLIENT_ID: ${{ needs.terraform.outputs.client_id }}
  # #           REACT_APP_LAMBDA_ENDPOINT: ${{ needs.terraform.outputs.lambda_endpoint }}
  # #           REACT_APP_ENVIRONMENT: ${{ env.AMPLIFY_ENV_NAME }}

  # #       - name: Deploy to Amplify
  # #         run: |
  # #           amplify push --yes
  # #           amplify publish --yes || (
  # #             echo "Amplify deployment failed"
  # #             cat amplify/.config/project-config.json
  # #             cat amplify/.config/local-env-info.json
  # #             exit 1
  # #           )
                    

  # # frontend:
  # #   name: Deploy Frontend
  # #   runs-on: ubuntu-latest
  # #   needs: terraform
  # #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
  # #   steps:
  # #     - name: Checkout Repository
  # #       uses: actions/checkout@v3

  # #     - name: Setup Node.js
  # #       uses: actions/setup-node@v3
  # #       with:
  # #         node-version: '18'
      
  # #     - name: Prepare npm cache
  # #       run: |
  # #         # Clear npm cache
  # #         npm cache clean --force
          
  # #         # Remove existing node_modules and package-lock.json if they exist
  # #         rm -rf node_modules package-lock.json
          
  # #         # Generate package-lock.json
  # #         npm install
          
  # #         # Verify file creation
  # #         ls -la
  # #         cat package-lock.json || echo "package-lock.json not created"
      
  # #     - name: Install Dependencies
  # #       run: |
  # #         npm install
  # #         npm install -D typescript @types/react @types/react-dom    

  # #     - name: Configure AWS Credentials
  # #       uses: aws-actions/configure-aws-credentials@v4
  # #       with:
  # #         role-to-assume: ${{ env.AWS_ROLE_ARN }}
  # #         aws-region: ${{ env.AWS_REGION }}

  # #     - name: Cache node modules
  # #       uses: actions/cache@v3
  # #       with:
  # #         path: node_modules
  # #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  # #         restore-keys: |
  # #           ${{ runner.os }}-node-

  # #     # - name: Run Tests
  # #     #   run: npm test
  # #     #   env:
  # #     #     CI: true

  # #     # - name: Create .env file
  # #     #   run: |
  # #     #     cat > .env << EOL
  # #     #     REACT_APP_AWS_REGION=${{ env.AWS_REGION }}
  # #     #     REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}
  # #     #     REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.client_id }}
  # #     #     REACT_APP_LAMBDA_ENDPOINT=${{ needs.terraform.outputs.lambda_endpoint }}
  # #     #     REACT_APP_ENVIRONMENT=${{ env.AMPLIFY_ENV_NAME }}
  # #     #     EOL

  # #     # - name: Install AWS Amplify CLI
  # #     #   run: npm install -g @aws-amplify/cli

  # #     # - name: Configure Amplify
  # #     #   run: |
  # #     #     amplify init \
  # #     #       --amplify "{\"envName\":\"${{ env.AMPLIFY_ENV_NAME }}\"}" \
  # #     #       --yes
  # #     #     amplify pull \
  # #     #       --appId ${{ needs.terraform.outputs.amplify_app_id }} \
  # #     #       --envName ${{ env.AMPLIFY_ENV_NAME }} \
  # #     #       --yes

  # #     - name: Create .env file
  # #       run: |
  # #         cat > .env << EOL
  # #         REACT_APP_AWS_REGION=${{ env.AWS_REGION }}
  # #         REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}
  # #         REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.client_id }}
  # #         REACT_APP_LAMBDA_ENDPOINT=${{ needs.terraform.outputs.lambda_endpoint }}
  # #         REACT_APP_ENVIRONMENT=${{ env.AMPLIFY_ENV_NAME }}
  # #         EOL
  # #     - name: Install AWS Amplify CLI
  # #       run: npm install -g @aws-amplify/cli
        
  # #     - name: Configure Amplify
  # #       run: |
  # #         amplify init \
  # #           --name "aiadventuregame" \
  # #           --envName "${{ env.AMPLIFY_ENV_NAME }}" \
  # #           --yes
  # #         amplify pull \
  # #           --appId "${{ needs.terraform.outputs.amplify_app_id }}" \
  # #           --envName "${{ env.AMPLIFY_ENV_NAME }}" \
  # #           --yes
  # #       env:
  # #         AMPLIFY_APP_ID: ${{ needs.terraform.outputs.amplify_app_id }}
  # #         AWS_REGION: ${{ env.AWS_REGION }}  
  # #         AMPLIFY_ENV_NAME: ${{ env.AMPLIFY_ENV_NAME }}
  # #     - name: Build Frontend
  # #       run: npm run build
  # #       env:
  # #         CI: true

  # #     - name: Deploy to Amplify
  # #       run: |
  # #         amplify publish --yes || (
  # #           echo "Amplify deployment failed"
  # #           exit 1
  # #         )

  # # lint:
  # #   name: Code Quality
  # #   runs-on: ubuntu-latest
    
  # #   steps:
  # #     - name: Checkout Repository
  # #       uses: actions/checkout@v3

  # #     - name: Setup Node.js
  # #       uses: actions/setup-node@v3
  # #       with:
  # #         node-version: '18'
  # #         cache: 'npm'

  # #     - name: Cache node modules
  # #       uses: actions/cache@v3
  # #       with:
  # #         path: node_modules
  # #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  # #         restore-keys: |
  # #           ${{ runner.os }}-node-

  # #     - name: Install Dependencies
  # #       run: npm ci

  # #     - name: Lint JavaScript/React
  # #       run: |
  # #         npm run lint || (
  # #           echo "JavaScript/React linting failed"
  # #           exit 1
  # #         )
  # #         npm run format:check || (
  # #           echo "Code formatting check failed"
  # #           exit 1
  # #         )

  # #     - name: Setup Python
  # #       uses: actions/setup-python@v4
  # #       with:
  # #         python-version: '3.9'
  # #         cache: 'pip'

  # #     - name: Cache Python packages
  # #       uses: actions/cache@v3
  # #       id: cache-pip
  # #       with:
  # #         path: ~/.cache/pip
  # #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  # #         restore-keys: |
  # #           ${{ runner.os }}-pip-

  # #     - name: Install Python Dependencies
  # #       if: steps.cache-pip.outputs.cache-hit != 'true'
  # #       run: |
  # #         cd infra/bedrock-code
  # #         python -m pip install --upgrade pip
  # #         if [ -f requirements.txt ]; then
  # #           pip install -r requirements.txt
  # #         else
  # #           echo "requirements.txt not found"
  # #           exit 1
  # #         fi

  # #     - name: Lint Python
  # #       run: |
  # #         cd infra/bedrock-code
  # #         pylint *.py || (
  # #           echo "Python linting failed"
  # #           exit 1
  # #         )
  # #         black --check . || (
  # #           echo "Python formatting check failed"
  # #           exit 1
  # #         )


