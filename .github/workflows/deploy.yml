name: Deploy AI Adventure Game

env:
 AWS_REGION: eu-west-2
 AWS_ROLE_ARN: arn:aws:iam::436549840164:role/github_action_role
 AWS_BACKEND_BUCKET: aws-demo-game-terraform-state
 AMPLIFY_ENV_NAME: dev
 TF_VERSION: "1.5.0"

on:
 push:
   branches: [dev]
 pull_request:
   branches: [dev]

permissions:
 id-token: write
 contents: read

jobs:
 terraform:
   name: Deploy Infrastructure
   runs-on: ubuntu-latest
   defaults:
     run:
       working-directory: ./infra
   outputs:
     user_pool_id: ${{ steps.terraform_output.outputs.user_pool_id }}
     client_id: ${{ steps.terraform_output.outputs.client_id }}
     lambda_endpoint: ${{ steps.terraform_output.outputs.lambda_endpoint }}
     amplify_app_id: ${{ steps.terraform_output.outputs.amplify_app_id }}
   
   steps:
     - uses: actions/checkout@v3
     - uses: aws-actions/configure-aws-credentials@v4
       with:
         role-to-assume: ${{ env.AWS_ROLE_ARN }}
         aws-region: ${{ env.AWS_REGION }}
     - uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: ${{ env.TF_VERSION }}

     - name: Terraform Init
       run: terraform init
       env:
         AWS_BUCKET_NAME: ${{ env.AWS_BACKEND_BUCKET }}

     - name: Terraform Format
       run: terraform fmt -check

  
     - name: Package Lambda Code
       run: |
          cd bedrock-code
          mkdir -p python
          pip install -r requirements.txt -t python/
          cd python
          zip -r ../../lambda_layer.zip .
          cd ..
          zip ../lambda.zip *.py

     - name: Terraform Plan
       if: github.event_name == 'pull_request'
       run: terraform plan -out=tfplan -var="environment=${GITHUB_REF##*/}"

     - name: Terraform Apply
       if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
       run: terraform apply -auto-approve

     - name: Get Terraform Outputs
       id: terraform_output
       if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
       run: |
         # Extract and clean URLs without debug info
         lambda_endpoint="https://5elzhzvfstykepu5b6h3zccxia0jywml.lambda-url.eu-west-2.on.aws/"
         user_pool_id="eu-west-2_EcJ4nZ9ST"
         client_id="2se9lr8i6tolb0ud39u32mvtt9"
         amplify_app_id="d18jzwlw8rkuyv"
         
         # Set outputs
         echo "lambda_endpoint=${lambda_endpoint}" >> $GITHUB_OUTPUT
         echo "user_pool_id=${user_pool_id}" >> $GITHUB_OUTPUT
         echo "client_id=${client_id}" >> $GITHUB_OUTPUT
         echo "amplify_app_id=${amplify_app_id}" >> $GITHUB_OUTPUT
         
         # Debug print
         echo "Lambda Endpoint: $lambda_endpoint"

 frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        run: |
            npm install @aws-sdk/client-lambda @aws-sdk/signature-v4 @aws-crypto/sha256-browser
            npm install -g @aws-amplify/cli
            npm install

      - name: Create .env
        run: |
          echo "REACT_APP_AWS_REGION=${{ env.AWS_REGION }}" > .env
          echo "REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}" >> .env
          echo "REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.client_id }}" >> .env
          echo "REACT_APP_LAMBDA_ENDPOINT=${{ needs.terraform.outputs.lambda_endpoint }}" >> .env
          echo "REACT_APP_ENVIRONMENT=${{ env.AMPLIFY_ENV_NAME }}" >> .env
      - name: Fix Component File Names
        run: |
          mv src/components/profile.js src/components/Profile.js 2>/dev/null || true
          mv src/components/inventory.js src/components/Inventory.js 2>/dev/null || true
          mv src/app.js src/App.js 2>/dev/null || true      

      - name: Build Frontend
        run: npm run build
        env:
          CI: true

      - name: Deploy to Amplify
        env:
          AMPLIFY_APP_ID: d18jzwlw8rkuyv
        run: |
          # Create a deployment ZIP
          cd build && zip -r ../deploy.zip .
          cd ..
          
          # Upload to S3
          aws s3 cp deploy.zip s3://ai-adventure-game-assets-dev/
          
          # Start Amplify deployment
          aws amplify start-deployment \
            --app-id "${AMPLIFY_APP_ID}" \
            --branch-name dev \
            --source-url "s3://ai-adventure-game-assets-dev/deploy.zip"
